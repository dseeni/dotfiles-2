" #############
" ### VIMRC ###
" #############


"-----------------------------------------------------------------------------
" GENERAL
"-----------------------------------------------------------------------------

" Use Vim settings -- always 1st
set nocompatible

" tmux - title fix
if has ("title")
    if &t_ts == "" && ( &term == "screen" || &term == "xterm" )
        let &t_ts = "\e]2;"
    endif
    if &t_ts != ""
        set title
    endif
endif

" Turns on detection, plugin and indent (needed only when there isn't vim-plug)
filetype plugin indent on

" Redraw after 'silent' command
command! -nargs=+ Silent execute 'silent <args>' | redraw!

" Quit QuickFix window along with source file window
autocmd WinEnter * if winnr('$') == 1 && getbufvar(winbufnr(winnr()), "&buftype") == "quickfix" | q | endif

" QuickFix window below other windows
autocmd FileType qf wincmd J

" Open file at the last known position
autocmd BufReadPost * if line("'\"") > 0 && line("'\"") <= line("$") | exec "normal! g`\"" | endif

" Backups etc.
set backup
set backupdir=~/.vimtmp/backup/
set directory=~/.vimtmp//
set undodir=~/.vimtmp/undo/
set undofile

" Indentation rules
set expandtab
set shiftwidth=4
set softtabstop=4
set tabstop=4
set cindent


"-----------------------------------------------------------------------------
" FUNCTIONS
"-----------------------------------------------------------------------------

" Fill rest of line with characters
function! FillLine( str )
    let tw = &textwidth
    if tw==0 | let tw = 80 | endif
    .s/[[:space:]]*$//
    let reps = (tw - col("$")) / len(a:str)
    if reps > 0
        .s/$/\=(' '.repeat(a:str, reps))/
    endif
endfunction

" Toggle cursorline's underline
let s:hl_state=0
function! ToggleCursorUnerline()
    if s:hl_state
        hi CursorLine cterm=underline
        let s:hl_state=0
    else
        hi CursorLine cterm=none
        let s:hl_state=1
    endif
endfunction
autocmd VimEnter * execute "call ToggleCursorUnerline()"

" Build YouCompleteMe - for Plug
function! BuildYCM(info)
    if a:info.status == 'installed' || a:info.force
        !./install.py --clang-completer --java-completer
    endif
endfunction

" Build YouCompleteMe - manual
function! BuildYCM_manual()
    !~/.vim/bundle/YouCompleteMe/install.py --clang-completer --java-completer
endfunction


" CALLING COMMANDS -----------------------------------------------------------
command! -nargs=+ FillLine call FillLine('<args>')


"-----------------------------------------------------------------------------
" EXTRA HIGHLIGHT GROUPS
"-----------------------------------------------------------------------------

" Extra whitespace at the ends of lines
hi ExtraWhitespace cterm=NONE
match ExtraWhitespace /\s\+$/
autocmd BufWinEnter * match ExtraWhitespace /\s\+$/
autocmd InsertEnter * match ExtraWhitespace /\s\+\%#\@<!$/
autocmd InsertLeave * match ExtraWhitespace /\s\+$/
autocmd BufWinLeave * call clearmatches()

" C/C++ preprocessor defined macros
function! HighlightC_PreProcDefines()
    syn clear C_PreProcDefine
    for l in getline('1','$')
        if l =~ '^\s*#\s*define\s\+'
            let macro = substitute(l, '^\s*#\s*define\s\+\(\k\+\).*$', '\1', '')
            exe 'syn keyword C_PreProcDefine ' . macro
        endif
    endfor
endfunction
autocmd FileType c,cpp,h,hpp call HighlightC_PreProcDefines()
autocmd InsertEnter * exec HighlightC_PreProcDefines()


"-----------------------------------------------------------------------------
" STATUS LINE
"-----------------------------------------------------------------------------

set statusline=
set statusline+=[%n]                                                                                     " Buffer number
set statusline+=\ \                                                                                      " Separator
set statusline+=%f                                                                                       " Path to the file
set statusline+=\ \                                                                                      " Separator
set statusline+=%y                                                                                       " Filetype
set statusline+=[%{&ff}]                                                                                 " File format
set statusline+=%{\"[\".(&fenc==\"\"?&enc:&fenc).((exists(\"+bomb\")\ &&\ &bomb)?\",BOM\":\"\").\"]\ \"} " File encoding
set statusline+=\ \                                                                                      " Separator
set statusline+=%r                                                                                       " Readonly flag
set statusline+=%w                                                                                       " Preview flag
set statusline+=\ \                                                                                      " Separator
set statusline+=%m                                                                                       " Modified flag
set statusline+=%=                                                                                       " Switch to the right side
set statusline+=Line\:\ %l/                                                                              " Current line
set statusline+=%L                                                                                       " Total lines
set statusline+=\ \|\ Column\:\ %c                                                                       " Current column
set statusline+=\ \|\ %p%%\ \|                                                                           " Percent through file


"-----------------------------------------------------------------------------
" PACKAGES
"-----------------------------------------------------------------------------

packadd matchit
packadd termdebug


"-----------------------------------------------------------------------------
" PLUGINS (Plug)
"-----------------------------------------------------------------------------

" Download vim-plug (if is not installed)
if empty(glob('~/.vim/autoload/plug.vim'))
    silent !curl --create-dirs -fLo ~/.vim/autoload/plug.vim https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
    autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif


call plug#begin('~/.vim/bundle')

Plug 'cohama/agit.vim'                                        " Agit
Plug 'w0rp/ale'                                               " ALE
Plug 'osyo-manga/vim-anzu'                                    " Anzu
Plug 'octol/vim-cpp-enhanced-highlight'                       " C++ Enhanced Highlight
Plug 'easymotion/vim-easymotion'                              " EasyMotion
Plug 'airblade/vim-gitgutter'                                 " GitGutter
Plug 'ludovicchabant/vim-gutentags'                           " Gutentags
Plug 'RRethy/vim-illuminate'                                  " Illuminate
Plug 'thaerkh/vim-indentguides'                               " Indentguides
Plug 'scrooloose/nerdcommenter'                               " NERDCommenter
Plug 'scrooloose/nerdtree'                                    " NERDTree
Plug 'jistr/vim-nerdtree-tabs'                                " NERDTree(Tabs)
Plug 'Xuyuanp/nerdtree-git-plugin'                            " NERDTree-Git
Plug 'raviqqe/vim-nonblank'                                   " NONBlank
Plug 'Valloric/vim-operator-highlight'                        " Operator-highlight
Plug 'junegunn/vim-peekaboo'                                  " Peekaboo
Plug 'kshenoy/vim-signature'                                  " Signature
Plug 'tpope/vim-surround'                                     " Surround
Plug 'godlygeek/tabular'                                      " Tabular
Plug 'christoomey/vim-tmux-navigator'                         " Tmux Navigator
Plug 'SirVer/ultisnips'                                       " UltiSnips
Plug 'mbbill/undotree'                                        " UndoTree
Plug 'romainl/vim-cool'                                       " vim-cool
Plug 'OrangeT/vim-csharp'                                     " Vim-CSharp
Plug 'pangloss/vim-javascript'                                " vim-javascript
Plug 'skywind3000/vim-preview'                                " vim-preview
Plug 'lervag/vimtex'                                          " VimTex
Plug 'yaroot/vissort'                                         " Visual Block Sorting
Plug 'wesQ3/vim-windowswap'                                   " WindowSwap
Plug 'thaerkh/vim-workspace'                                  " Workspace
Plug 'Valloric/YouCompleteMe', { 'do': function('BuildYCM') } " YouCompleteMe

call plug#end()


" VARIABLES ------------------------------------------------------------------

let g:ale_set_highlights = 0                                          " ALE                    - disable highlight
let g:ale_set_quickfix = 1                                            " ALE                    - enable quicklist
let g:ale_sign_column_always = 1                                      " ALE                    - sing column always visible
let g:indexed_search_colors = 0                                       " IndexedSearch          - no color of messages
let g:NERDSpaceDelims = 1                                             " NERDCommenter          - add space after comment delimiters
let g:NERDCommentEmptyLines = 1                                       " NERDCommenter          - allow commenting empty lines
let g:NERDTreeWinPos = "right"                                        " NERDTree               - always on right side
let g:nerdtree_tabs_smart_startup_focus = 2                           " NERDTree(Tabs)         - always focus file window after startup
let g:nerdtree_tabs_open_on_console_startup = 1                       " NERDTree(Tabs)         - open on startup
let g:SignatureMarkTextHLDynamic = 1                                  " Signature              - git gutter compability
let g:UltiSnipsEditSplit = "context"                                  " UltiSnips              - :UltiSnipsEdit splits window instead of taking over it
let g:UltiSnipsExpandTrigger = '<C-j>'                                " UltiSnips              - custom expand key to work with YCM
let g:UltiSnipsSnippetDirectories = ['~/.vim/UltiSnips', 'UltiSnips'] " UltiSnips              - set dafault directory for snippets
let g:undotree_SetFocusWhenToggle = 1                                 " undotree               - autofocus
let g:undotree_ShortIndicators = 1                                    " undotree               - short time indicators
let g:undotree_SplitWidth = 32                                        " undotree               - window width
let g:Illuminate_delay = 0                                            " vim-illuminate         - time delay in milliseconds
let g:ophigh_highlight_link_group = 1                                 " vim-operator-highlight - add highlight group
let g:vimtex_compiler_latexmk = {'callback' : 0}                      " VimTeX                 - compiler

" YouCompleteMe
let g:ycm_add_preview_to_completeopt = 1
let g:ycm_autoclose_preview_window_after_completion = 1
let g:ycm_complete_in_comments = 1
let g:ycm_global_ycm_extra_conf = '$HOME/dotfiles/vim/ycm_extra_conf.py'
let g:ycm_key_list_stop_completion = ['<C-y>']
let g:ycm_max_num_candidates = 20
let g:ycm_min_num_of_chars_for_completion=2
let g:ycm_show_diagnostics_ui = 0

let g:ycm_semantic_triggers = {
            \   'c' : ['->', '.','re![_a-zA-z0-9]'],
            \   'objc' : ['->', '.', 're!\[[_a-zA-Z]+\w*\s', 're!^\s*[^\W\d]\w*\s', 're!\[.*\]\s'],
            \   'ocaml' : ['.', '#'],
            \   'cpp,objcpp' : ['->', '.', '::','re![_a-zA-Z0-9]'],
            \   'perl' : ['->'],
            \   'php' : ['->', '::'],
            \   'cs,java,javascript,typescript,d,python,perl6,scala,vb,elixir,go' : ['.'],
            \   'ruby' : ['.', '::'],
            \   'lua' : ['.', ':'],
            \   'erlang' : [':'],
            \ }


" AUTOCMD --------------------------------------------------------------------

autocmd FileType agit NERDTreeClose    " Fix for Agit and NERDTree
autocmd BufEnter * SignatureRefresh    " Fix for Signature and gitgutter
autocmd InsertEnter * SignatureRefresh " Fix for Signature and gitgutter
autocmd VimEnter * VSO i               " Vissort - case insensivity
autocmd VimEnter * unmap <leader>ww


"-----------------------------------------------------------------------------
" FOLDING
"-----------------------------------------------------------------------------

" Languages
autocmd FileType javascript setlocal foldmethod=syntax

" Normally -- DO NOT SORT!!
autocmd BufReadPre * setlocal foldmethod=indent
autocmd BufWinEnter * if &fdm == 'indent' | setlocal foldmethod=manual | endif

" 'set'
set foldlevel=10
set foldnestmax=10
set nofoldenable


"-----------------------------------------------------------------------------
" 'set' OPTIONS
"-----------------------------------------------------------------------------

set autoindent                 " Always set autoindenting on
set background=dark            " Dark background (needed for proper colors)
set backspace=indent,eol,start " Allow backspacing over everything in insert mode
set cursorline                 " Current line highlight
set history=50                 " Keep 50 lines of command line history
set hlsearch                   " Search highlight
set ignorecase                 " Ignoring case of letters while searching
set incsearch                  " Do incremental searching
set laststatus=2               " To always display status line
set linebreak                  " Don't break words while warping lines
set listchars=""               " Helps with vim-indentguides - no $ at the end of lines
set nostartofline              " Cursor is kept in the same column (if possible)
set noswapfile                 " Disable swap file
set nowrap                     " Do not wrap lines on default
set nrformats=                 " Ignore non-DEC numeral systems when in- or decrementing with <C-a>/<C-x>
set number                     " Enable line numbers
set ruler                      " Show the cursor position all the time
set scrolloff=5                " Minimal number of screen lines to keep above and below the cursor
set showcmd                    " Display incomplete commands
set smartcase                  " If searching with capital letter then use match case
set smartindent                " Smart indention
set splitbelow                 " New windows open on right when split verticaly
set splitright                 " New windows open on right when split horizontaly
set t_Co=256                   " 256 color support
set viewoptions-=options,folds " View options
set wildmenu                   " Menu for command linecompletion


"-----------------------------------------------------------------------------
" SYNTAX HIGHLIGHT
"-----------------------------------------------------------------------------

hi  C_PreProcDefine  ctermfg=DarkRed
hi  Comment          ctermfg=grey
hi  CursorLineNr     ctermfg=magenta
hi  ExtraWhitespace  ctermbg=red
hi  LineNr           ctermfg=grey
hi  Normal           ctermfg=DarkGreen
hi  Number           ctermfg=DarkCyan
hi  PreProc          ctermfg=LightGreen
hi  SignColumn       ctermbg=black
hi  Special          ctermfg=red
hi  StatusLine       ctermfg=yellow
hi  StatusLineNC     ctermfg=white
hi  String           ctermfg=DarkCyan
hi  Type             ctermfg=white
hi  WildMenu         ctermbg=cyan


" Plugins' highlight ---------------------------------------------------------

hi  illuminatedWord  cterm=underline
hi  jsObjectProp     ctermfg=yellow
hi  OperatorChars    ctermfg=3


" HiLink -----------------------------------------------------------------------------

hi link Noise OperatorChars


"-----------------------------------------------------------------------------
" MAPPINGS
"-----------------------------------------------------------------------------

" Set leader
let mapleader="`"
let maplocalleader=','
map <space> <leader>

" leader + sth
inoremap <leader><Tab> <C-v><Tab>
map <leader>h :noh<CR>
nnoremap <leader>v gg0vG$
noremap <leader>= gg=G``
noremap <leader>" :vnew<CR>

" leader + function keys -- also mapped: <F1>, <F3>, <F4>
map <leader><F2> :set wrap!<CR>

" Function keys -- also mapped: <F4>, <F8>, <F10> ; do not use <F11>
imap <F1> <Esc>gTi
imap <F2> <Esc>gti
map <F1> gT
map <F2> gt
map <F3> :tabe<CR>
map <F5> :set invrelativenumber<CR>
map <F9> :w <bar> make<CR>

" Ctrl + sth -- also mapped: a, s
inoremap <C-d> <ESC>:t.<CR>i
inoremap <C-p> <ESC>"+pa
noremap <C-d> :t.<CR>
noremap <C-p> "+p
noremap <C-q><C-q> q
noremap <C-w><Tab> :vnew<CR>
noremap <C-y> "+y

" Normal keys
map - $
map G G0
map gg gg0
map j gj
map k gk
map N Nzz
map n nzz
noremap '' ``
noremap <CR> o<ESC>
noremap <Tab> <C-w><C-w>
noremap f z
noremap F zfa{
noremap gr gd[{V%::s/<C-R>///gc<left><left><left>
noremap z f

" <nop>
map ` <nop>
map c <nop>
map gh <nop>
map q <nop>
map Q <nop>
map ZZ <nop>


" FUNCTIONS' MAPPING ---------------------------------------------------------

map <F4> :call ToggleCursorUnerline()<CR>


" PLUGINS' MAPPING -----------------------------------------------------------

map <leader><F1> :UndotreeToggle<CR>
map <leader><F3> :call WindowSwap#EasyWindowSwap()<CR>
map <leader><F4> :UltiSnipsEdit<CR>
map <leader>n :NERDTreeToggle<CR>
map c- <plug>NERDCommenterToEOL
map c<BS> <leader>cu
map c<space> <leader>c<space>
map cc <leader>cc
map cm <leader>cm
map s cs
map tt :PreviewTag<CR>
nnoremap <leader>s :ToggleWorkspace<CR>
vmap s S

" Move to line
map <leader>l <Plug>(easymotion-bd-jk)
nmap <leader>l <Plug>(easymotion-overwin-line)

" Move to word
map <leader>w <Plug>(easymotion-bd-w)

" Anzu
nmap n <Plug>(anzu-n-with-echo)
nmap N <Plug>(anzu-N-with-echo)
nmap * <Plug>(anzu-star-with-echo)
nmap # <Plug>(anzu-sharp-with-echo)


"-----------------------------------------------------------------------------
" COMMANDS
"-----------------------------------------------------------------------------

command Ctags w <bar> Silent !ctags --fields=+nS -a %
command Q q!
command QQ qa!
command Sort :normal! :sort i<CR>
command SortBlock :normal! vip:sort i<CR>
command TabSpace execute 'Tab /\S\+/l1'
command W wq
command Ww :execute ':silent w !sudo tee % > /dev/null' | :edit!
command WW :execute ':silent w !sudo tee % > /dev/null' | :edit! | q
command! -nargs=+ FT execute 'set filetype=<args>'
command! -nargs=+ TabChar execute 'Tabularize / <args> /l0'


"-----------------------------------------------------------------------------
" ALIASES
"-----------------------------------------------------------------------------

ca nonum set nonumber
ca Plug PlugUpgrade <bar> PlugUpdate
ca rep %!cat

" Lowercasing aliases
ca agit Agit
ca ft FT


"-----------------------------------------------------------------------------
" RUN SINGLE FILE CODE (with simple compiling beforehand if necessary)
"-----------------------------------------------------------------------------

" C/C++
autocmd filetype c,cpp nmap <F8> :w! <bar> exec '!g++ -std=c++17 -g '.shellescape('%').' -o '.shellescape('%:t:r').' && ./'.shellescape('%:t:r')<CR>

" Python
autocmd filetype python nmap <F8> :w! <bar> !python %<CR>

" HTML
autocmd filetype html nmap <F8> :w! <bar> !xdg-open %<CR><CR>

" Shell Script
autocmd filetype sh nmap <F8> :w! <bar> !%:p<CR>

" Lisp
autocmd filetype lisp nmap <F8> :w <bar> !clisp %<CR>

" Lua
autocmd filetype lua nmap <F8> :w <bar> !lua %<CR>

" LaTeX
autocmd filetype tex nmap <F8> :w<CR><LocalLeader>lv:!latexmk -c && rm %:t:r.synctex.gz<CR><CR>


"-----------------------------------------------------------------------------
" DEBUG - source debug options
"-----------------------------------------------------------------------------

" source $HOME/dotfiles/vim/sources/debug.vim


"-----------------------------------------------------------------------------
" TEMPORARY
"-----------------------------------------------------------------------------
